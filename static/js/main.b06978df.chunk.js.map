{"version":3,"sources":["App.tsx","index.tsx"],"names":["EmojiImg","_a","emoji","tooltip","emojiVersion","react","style","backgroundImage","backgroundPosition","x","y","backgroundSize","sheetSizeX","sheetSizeY","display","height","width","title","src_App","_super","App","props","_this","call","this","state","filteredEmojiData","emoji_data_ts_es5","Object","tslib_es6","prototype","componentDidMount","setState","render","className","type","onChange","e","onChangeFilter","map","a","i","emojiImage","getImageData","short_name","key","currentVersion","value","index","emojis","emojiCategoryLookUp","get","position","currentTarget","length","searchEmoji","react_dom","document","getElementById"],"mappings":"qJAsEA,SAASA,EAASC,OAACC,EAAAD,EAAAC,MAAOC,EAAAF,EAAAE,QAASC,EAAAH,EAAAG,aACjC,OAAQC,EAAA,sBACNC,MAAO,CACLC,gBACE,gDAAgDH,EAAY,gCAC9DI,mBAAuBN,EAAMO,EAAC,KAAKP,EAAMQ,EAAC,IAC1CC,eAAmBT,EAAMU,WAAU,KAAKV,EAAMW,WAAU,IACxDC,QAAS,eACTC,OAAQ,OACRC,MAAO,QAETC,MAAOd,IAII,IAAAe,EAlFf,SAAAC,GAEE,SAAAC,EAAYC,GAAZ,IAAAC,EACEH,EAAAI,KAAAC,KAAMH,IAAMG,YACZF,EAAKG,MAAQ,CACXC,kBAAmB,IAErBJ,EAAKpB,MAAQ,IAAIyB,EAAA,IA0DrB,OAjEkBC,OAAAC,EAAA,EAAAD,CAAAR,EAAAD,GASTC,EAAAU,UAAAC,kBAAP,WACEP,KAAKQ,SAAS,CACZN,kBAAmB,MAKhBN,EAAAU,UAAAG,OAAP,eAAAX,EAAAE,KACE,OACEnB,EAAA,qBAAK6B,UAAU,gBAEb7B,EAAA,uBAAO8B,KAAK,OAAOC,SAEjB,SAACC,GAAM,OAAAf,EAAKgB,eAAeD,MAE7BhC,EAAA,yBACGmB,KAAKC,MAAMC,kBAAkBa,IAAI,SAACC,EAAGC,GACpC,IAAMC,EAAapB,EAAKpB,MAAMyC,aAAaH,EAAEI,YAE7C,OAAiB,MAAdF,EACMrC,EAAA,2BAEFA,EAAA,cAACL,EAAQ,CAAC6C,IAAKJ,EAAGvC,MAAOwC,EAAYvC,QAASqC,EAAEI,WAAYxC,aAAckB,EAAKpB,MAAM4C,oBAGhGzC,EAAA,qBAAK6B,UAAU,gBACZP,EAAA,EAAeY,IAAI,SAACQ,EAAOC,GAC1B,OACE3C,EAAA,qBAAKwC,IAAKG,GACR3C,EAAA,8BAAQ0C,SAGQ,OADRE,EAAS3B,EAAKpB,MAAMgD,oBAAoBC,IAAIJ,IAEzCE,EAAOV,IAAI,SAACC,EAAGC,GACpB,IAAMW,EAAW9B,EAAKpB,MAAMyC,aAAaH,EAAEI,YAC3C,OAAgB,MAAZQ,EACK/C,EAAA,2BAEFA,EAAA,cAACL,EAAQ,CAAC6C,IAAKJ,EAAGvC,MAAOkD,EAAUjD,QAASqC,EAAEI,WAAYxC,aAAckB,EAAKpB,MAAM4C,mBAGvFzC,EAAA,4BAXR,IACO4C,OAmBd7B,EAAAU,UAAAQ,eAAR,SAAuBD,GACrB,IAAMY,EAA0C,IAAjCZ,EAAEgB,cAAcN,MAAMO,OAAe,GAAK9B,KAAKtB,MAAMqD,YAAYlB,EAAEgB,cAAcN,MAAO,IACvGvB,KAAKQ,SAAS,CACZN,kBAAmBuB,KAGzB7B,EAjEA,CAAkBf,EAAA,iBCElBmD,EAAA,OACEnD,EAAA,cAACa,EAAG,MACJuC,SAASC,eAAe","file":"static/js/main.b06978df.chunk.js","sourcesContent":["import { categoriesData, Emoji, EmojiData, EmojiImage } from 'emoji-data-ts'\nimport * as React from 'react'\n\nclass App extends React.Component<{}, { filteredEmojiData: Emoji[] }> {\n  private emoji: EmojiData ;\n  constructor(props: Readonly<{}>) {\n    super(props);\n    this.state = {\n      filteredEmojiData: []\n    }\n    this.emoji = new EmojiData()\n  }\n  public componentDidMount(){\n    this.setState({\n      filteredEmojiData: []\n    })\n  }\n\n\n  public render() {\n    return (\n      <div className=\"App\">\n        Filter\n        <input type=\"text\" onChange={\n          // tslint:disable-next-line:jsx-no-lambda\n          (e) => this.onChangeFilter(e)\n        } />\n        <div>\n          {this.state.filteredEmojiData.map((a, i) => {\n            const emojiImage = this.emoji.getImageData(a.short_name)\n\n            if(emojiImage == null) {\n              return <span />\n            }\n            return <EmojiImg key={i} emoji={emojiImage} tooltip={a.short_name} emojiVersion={this.emoji.currentVersion}/>\n          })}\n        </div>\n        <div className=\"emoji-picker\">\n          {categoriesData.map((value, index) => {\n            return (\n              <div key={index}>\n                <h2>---{value}---</h2>\n                {(() => {\n                  const emojis = this.emoji.emojiCategoryLookUp.get(value)\n                  if (emojis != null) {\n                    return emojis.map((a, i) => {\n                      const position = this.emoji.getImageData(a.short_name)\n                      if (position == null) {\n                        return <span />\n                      }\n                      return <EmojiImg key={i} emoji={position} tooltip={a.short_name} emojiVersion={this.emoji.currentVersion}/>\n                    })\n                  }\n                  return <span />\n                })()}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n  private onChangeFilter(e: React.FormEvent<HTMLInputElement>) {\n    const emojis = e.currentTarget.value.length === 0 ? [] : this.emoji.searchEmoji(e.currentTarget.value, 10)\n    this.setState({\n      filteredEmojiData: emojis\n    })\n  }\n}\n\nfunction EmojiImg({emoji, tooltip, emojiVersion}: {emoji: EmojiImage, tooltip:string, emojiVersion: string}) {\n  return (<span\n    style={{\n      backgroundImage:\n        `url(https://unpkg.com/emoji-datasource-apple@${emojiVersion}/img/apple/sheets-256/64.png)`,\n      backgroundPosition: `${emoji.x}% ${emoji.y}%`,\n      backgroundSize: `${emoji.sheetSizeX}% ${emoji.sheetSizeY}%`,\n      display: 'inline-block',\n      height: '24px',\n      width: '24px',\n    }}\n    title={tooltip}\n  />)\n}\n\nexport default App\n","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root') as HTMLElement\n);\n"],"sourceRoot":""}